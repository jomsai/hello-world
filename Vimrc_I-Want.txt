set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
" call vundle#rc()
call vundle#begin()

set term=xterm-256color
set t_Co=256

" This is the Vundle package, which can be found on GitHub.
" For GitHub repos, you specify plugins using the
" 'user/repository' format
Plugin 'gmarik/vundle'

" We could also add repositories with a ".git" extension
Plugin 'scrooloose/nerdtree.git'

" To get plugins from Vim Scripts, you can reference the plugin
" by name as it appears on the site
Plugin 'Buffergator'
Plugin 'kien/ctrlp.vim' " fuzzy find files
Plugin 'benmills/vimux' " My note...this is vim inside Tmux I think RDW
Plugin 'tpope/vim-fugitive' " the ultimate git helper
Plugin 'tpope/vim-commentary' " comment/uncomment lines with gcc or gc in visual mode
Plugin 'vim-scripts/indentpython.vim'
Bundle 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'tpope/vim-vividchalk'
Plugin 'jnurmine/zenburn'
Plugin 'altercation/vim-colors-solarized'

" colors ~/.vim/bundle/Zenburn/colors

" if has('gui_running')
"  set background=dark
"  colorscheme solarized
" else
"  colorscheme zenburn
" endif

let python_highlight_all=1
syntax on

" All of your Plugins must be added before the following line
call vundle#end()            " required if vundle begin above
filetype plugin indent on    " required

set encoding=utf-8
set nomodeline
set nu
set clipboard=unnamed
set splitbelow
set splitright
"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Vi inside Bash may not work like this on Mac OS X
" set editing-mode vi

au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=79
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix

au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

"python with virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF


